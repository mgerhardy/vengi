include(CheckCCompilerFlag)
include(CheckCXXCompilerFlag)

check_c_compiler_flag("-Wno-sign-compare" C_NO_SIGN_COMPARE)
if (C_NO_SIGN_COMPARE)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-sign-compare")
endif()

set(CMAKE_C_FLAGS "")
if (USE_STACKTRACES)
	add_subdirectory(backward)
endif()
add_subdirectory(benchmark)
add_subdirectory(glm)
add_subdirectory(stb_image)
add_subdirectory(json)
add_subdirectory(lua54)
add_subdirectory(lzfse)
add_subdirectory(gtest)
set(SDL_CMAKE_DEBUG_POSTFIX "" CACHE STRING "Name suffix for debug builds" FORCE)
set(SDL2_DISABLE_INSTALL ON CACHE BOOL "" FORCE)
set(SDL2_DISABLE_UNINSTALL ON CACHE BOOL "" FORCE)
find_package(PkgConfig)
if (PkgConfig_FOUND)
	pkg_check_modules(SDL2 sdl2)
	if (SDL2_FOUND)
		message(STATUS "SDL system wide installation found")
	endif()
else()
	message(WARN "Pkg-config not found")
endif()
if (NOT SDL2_FOUND)
	find_package(SDL2)
endif()
if (SDL2_FOUND OR EMSCRIPTEN)
	add_library(sdl2 INTERFACE)
	target_include_directories(sdl2 INTERFACE ${SDL2_INCLUDE_DIRS})
	target_link_libraries(sdl2 INTERFACE ${SDL2_LINK_LIBRARIES})
	add_library(SDL2::SDL2 ALIAS sdl2)
else()
	set(SDL_STATIC_ENABLED_BY_DEFAULT ON CACHE BOOL "" FORCE)
	set(SDL_SHARED_ENABLED_BY_DEFAULT OFF CACHE BOOL "" FORCE)
	set(SDL_TEST_ENABLED_BY_DEFAULT OFF CACHE BOOL "" FORCE)
	set(SDL_FORCE_STATIC_VCRT ON CACHE BOOL "" FORCE)
	add_subdirectory(sdl2)
	add_library(sdl2 INTERFACE)
	target_link_libraries(sdl2 INTERFACE SDL2::SDL2main SDL2-static)
endif()
set(SDL_PCH
	<SDL.h>
	<SDL_stdinc.h>
	<SDL_atomic.h>
)
target_precompile_headers(sdl2 INTERFACE ${SDL_PCH})

find_package(ozz_animation)
if (OZZ_ANIMATION_FOUND)
	add_library(ozz-animation INTERFACE)
	target_include_directories(ozz-animation INTERFACE ${OZZ_ANIMATION_INCLUDE_DIRS})
	target_link_libraries(ozz-animation INTERFACE ${OZZ_ANIMATION_LINK_LIBRARIES})
else()
	set(ozz_build_tools OFF)
	set(ozz_build_fbx OFF)
	set(ozz_build_gltf OFF)
	set(ozz_build_data OFF)
	set(ozz_build_samples OFF)
	set(ozz_build_howtos OFF)
	set(ozz_build_tests OFF)
	add_subdirectory(ozz_animation)
	add_library(ozz-animation INTERFACE)
	target_link_libraries(ozz-animation INTERFACE ozz_animation ozz_animation_offline)
endif()
add_subdirectory(simplecpp)
add_subdirectory(yocto)
