include(CheckCCompilerFlag)
include(CheckCXXCompilerFlag)

set(CMAKE_C_FLAGS "")

check_c_compiler_flag("-Wno-sign-compare" C_NO_SIGN_COMPARE)
if (C_NO_SIGN_COMPARE)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-sign-compare")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-sign-compare")
endif()

check_c_compiler_flag("-Wno-shadow" C_NO_SHADOW)
if (C_NO_SHADOW)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-shadow")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-shadow")
endif()

check_c_compiler_flag("-Wno-cast-qual" C_NO_CAST_QUAL)
if (C_NO_CAST_QUAL)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-cast-qual")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-cast-qual")
endif()

if (USE_STACKTRACES)
	add_subdirectory(backward)
endif()
add_subdirectory(benchmark)
add_subdirectory(glm)
add_subdirectory(stb_image)
add_subdirectory(lua54)
add_subdirectory(meshoptimizer)
add_subdirectory(lzfse)
add_subdirectory(gtest)
find_package(PkgConfig)
if (PkgConfig_FOUND)
	pkg_check_modules(SDL3 sdl3)
	if (SDL3_FOUND)
		message(STATUS "SDL3 system wide installation found")
	endif()
else()
	message(STATUS "Pkg-config not found")
endif()
if (NOT SDL3_FOUND)
	find_package(SDL3)
endif()
if (SDL3_FOUND OR EMSCRIPTEN)
	add_library(sdl3 INTERFACE)
	target_include_directories(sdl3 INTERFACE ${SDL3_INCLUDE_DIRS})
	target_link_libraries(sdl3 INTERFACE ${SDL3_LINK_LIBRARIES})
	add_library(SDL3::SDL3 ALIAS sdl3)
endif()
set(SDL_PCH
	<SDL3/SDL.h>
	<SDL3/SDL_stdinc.h>
	<SDL3/SDL_atomic.h>
)
target_precompile_headers(sdl3 INTERFACE ${SDL_PCH})

add_subdirectory(simplecpp)
add_subdirectory(yocto)
