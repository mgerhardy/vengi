#include <gtest/gtest.h>
#include <SDL3/SDL.h>
#include "core/Log.h"

char **_argv;
int _argc;

class LocalEnv: public ::testing::Environment {
public:
    virtual ~LocalEnv() {
    }
    virtual void SetUp() override {
    }
    virtual void TearDown() override {
    }
};

static SDL_AssertState Test_AssertionHandler(const SDL_AssertData* data, void* userdata) {
    Log::error("Assertion failure at %s (%s:%i); triggered %i %s.\n\tFailing condition: \"%s\".",
        data->function, data->filename, data->linenum,
        data->trigger_count, data->trigger_count == 1 ? "time" : "times",
        data->condition
    );
    return SDL_ASSERTION_BREAK;
}

extern "C" int main (int argc, char *argv[]) {
    ::testing::AddGlobalTestEnvironment(new LocalEnv);
    ::testing::InitGoogleTest(&argc, argv);
    _argv = argv;
    _argc = argc;
#if __cpp_exceptions
    try {
#endif
        SDL_SetAssertionHandler(Test_AssertionHandler, nullptr);
        return RUN_ALL_TESTS();
#if __cpp_exceptions
    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
        return EXIT_FAILURE;
    }
#endif
}
